"""

"""

import collections
from math import floor
from typing import List, Optional
from helpers.TreeNode import TreeNode


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        # 1, color node
        colors = {}
        c = 0

        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj and nei not in colors:
                    dfs(nei, color)

        for node in range(N):
            if node not in colors:
                dfs(node, c)
                c += 1
        # 2. Size of each color
        size = collections.Counter(colors.values())
        # 3. Find unique color
        color_count = collections.Counter()
        for node in initial:
            color_count[colors[node]] += 1
        # Answer
        ans = float("inf")
        for x in initial:
            c = colors[x]
            if color_count[c] == 1:
                if ans == float("inf"):
                    ans = x
                elif size[c] > size[colors[ans]]:
                    ans = x
                elif size[c] == size[colors[ans]] and x < ans:
                    ans = x
        return ans if ans < float("inf") else min(initial)


if __name__ == "__main__":
    sol = Solution()
    graph = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]
    res = sol.minMalwareSpread(graph)
    print("Ans is: ", res)
